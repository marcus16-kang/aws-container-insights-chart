clusterInfo:
  configMapName: "fluent-bit-cluster-info"
  clusterName: "" # [REQUIRED]
  region: ""      # [REQUIRED]
  fluentBitHttpServer: "On"
  fluentBitHttpPort: "2020"
  fluentBitReadHead: "Off"
  fluentBitReadTail: "On"

fluentBitConfig:
  configMapName: "fluent-bit-config"
  extraApplicationConfig: ""
  # You can add extra logging configuration like this
  # extraApplicationConfig: |
  #   [INPUT]
  #       Name                tail
  #       Tag                 application.app_name
  #       Path                /var/log/containers/app_name-*
  #       multiline.parser    docker, cri
  #       DB                  /var/fluent-bit/state/flb_app_name.db
  #       Mem_Buf_Limit       50MB
  #       Skip_Long_Lines     On
  #       Refresh_Interval    10
  #       Rotate_Wait         30
  #       storage.type        filesystem
  #       Read_from_Head      ${READ_FROM_HEAD}
    
  #   [OUTPUT]
  #       Name                cloudwatch_logs
  #       Match               application.app_name
  #       region              ${AWS_REGION}
  #       log_group_name      /aws/${AWS_REGION}/app_name
  #       log_stream_prefix   ${HOST_NAME}-
  #       auto_create_group   true
  #       extra_user_agent    container-insights
  
  extraParserConfig: ""
  # extraParserConfig: |
  #   [PARSER]
  #       Name docker_no_time
  #       Format json
  #       Time_Keep Off
  #       Time_Key time
  #       Time_Format %Y-%m-%dT%H:%M:%S.%L

image:
  repository: public.ecr.aws/aws-observability/aws-for-fluent-bit
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "stable"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  annotations: {}
  name: "cloudwatch-agent"

clusterRole:
  name: "cloudwatch-agent-role"

clusterRoleBinding:
  name: "cloudwatch-agent-role-binding"

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources:
  limits:
    cpu: 200m
    memory: 200Mi
  requests:
    cpu: 100m
    memory: 100Mi

nodeSelector:
  # key1: value1
  # key2: value2

tolerations: []
  # - key: "key1"         # taint key
  #     value: "value1"     # taint value
  #     operator: "Equal"
  #     effect: "NoSchedule"

affinity: {}
